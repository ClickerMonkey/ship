
-- A group has certain priveleges (if it can modify root pages, modify
-- ownerships, modify memberships). A group can have several users and
-- a group can own several pages.
CREATE TABLE groups (
	id					INT NOT NULL,
	name				VARCHAR2(64) NOT NULL,
	modify_root		CHAR(1) DEFAULT '0' NOT NULL,
	modify_owner	CHAR(1) DEFAULT '0' NOT NULL,
	modify_member	CHAR(1) DEFAULT '0' NOT NULL,
	PRIMARY KEY (id)
);

-- Used to for auto incrementing. Starts at 1 and continually generates numbers.
CREATE SEQUENCE groups_auto
	START WITH 1 INCREMENT BY 1;

-- Trigger for setting id of group when not specified on insert.
CREATE OR REPLACE TRIGGER groups_auto_trigger
	BEFORE INSERT ON groups FOR EACH ROW
	BEGIN
		SELECT groups_auto.nextval INTO :NEW.id FROM DUAL;
	END;
/

-- A user is any person that can comment on pages. A user can belong to 
-- several groups and therefore can edit any pages its groups own.
CREATE TABLE users (
	alias				VARCHAR2(24) NOT NULL,
	password			VARCHAR2(24) NOT NULL,
	first_name		VARCHAR2(24),
	last_name		VARCHAR2(24),
	date_joined		TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	email				VARCHAR2(128) NOT NULL,
	dob				DATE,
	avatar			VARCHAR2(64),
	enabled			CHAR(1) DEFAULT '0',
	PRIMARY KEY (alias)
);

-- A page of content containing comments from users. Several groups can own
-- a page, which means they can edit the content.
CREATE TABLE pages (
	id					INT NOT NULL,
	name				VARCHAR2(64),
	title				VARCHAR2(128),
	parent_id		INT,
	time_created	TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	time_edited		TIMESTAMP,
	user_edited		VARCHAR2(24),
	content			CLOB,
	FOREIGN KEY (parent_id)
		REFERENCES pages(id) ON DELETE CASCADE,
	FOREIGN KEY (user_edited)
		REFERENCES users(alias) ON DELETE SET NULL, 
	PRIMARY KEY (id)
);

-- Used to for auto incrementing. Starts at 1 and continually generates numbers.
CREATE SEQUENCE pages_auto
	START WITH 1 INCREMENT BY 1;

-- Trigger for setting id of page when not specified on insert.
CREATE OR REPLACE TRIGGER pages_auto_trigger
	BEFORE INSERT ON pages FOR EACH ROW
	BEGIN
		SELECT pages_auto.nextval INTO :NEW.id FROM DUAL;
	END;
/

-- The table of all comments for all pages. The key is the page, user, and the
-- ordinal (index) of the comment on the page. The ordinal should not be 
-- specified or changed, it will be generated by a trigger at insertion.
CREATE TABLE comments (
	page_id			INT NOT NULL,
	user_alias		VARCHAR2(24) NOT NULL,
	ordinal			INT NOT NULL,
	content			CLOB,
	ratings			NUMBER(10) DEFAULT '0',
	avg_rating		NUMBER(3,1) DEFAULT '0.0',
	time_created	TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	time_edited		TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	response_to		INT,
	FOREIGN KEY (page_id)
		REFERENCES pages(id) ON DELETE CASCADE,
	FOREIGN KEY (user_alias)
		REFERENCES users(alias) ON DELETE CASCADE,
	PRIMARY KEY (page_id, ordinal)
);

-- The trigger used to automatically generate the ordinal to a comment
-- so all that needs to be specified is the page_id and user_alias.
CREATE OR REPLACE TRIGGER comments_ordinal
	BEFORE INSERT ON comments FOR EACH ROW
	DECLARE 
		max_ordinal INT;
		row_count NUMBER;
	BEGIN
		-- Get how many comments are on this page.
		SELECT COUNT(*) INTO row_count
			FROM comments WHERE page_id=:NEW.page_id;
		-- If there are none then this is the first.
		IF row_count = 0 THEN
			:NEW.ordinal := 0;
		ELSE
		-- This is not the first comment, ordinal is one more then max.
			SELECT MAX(ordinal)+1 INTO :NEW.ordinal
				FROM comments WHERE page_id=:NEW.page_id;
		END IF;
	END;
/

-- A many-to-many relationship between groups and pages.
CREATE TABLE ownerships (
	group_id			INT NOT NULL,
	page_id			INT NOT NULL,
	date_created	TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	user_created	VARCHAR2(24),
	FOREIGN KEY (group_id)
		REFERENCES groups(id) ON DELETE CASCADE,
	FOREIGN KEY (page_id)
		REFERENCES pages(id) ON DELETE CASCADE,
	PRIMARY KEY (group_id, page_id)
);
  
-- A many-to-many relationship between users and groups.
CREATE TABLE memberships (
	group_id			INT NOT NULL,
	user_alias		VARCHAR2(24),
	date_created	TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	user_created	VARCHAR2(24),
	FOREIGN KEY (group_id)
		REFERENCES groups(id) ON DELETE CASCADE,
	FOREIGN KEY (user_alias)
		REFERENCES users(alias) ON DELETE CASCADE,
	FOREIGN KEY (user_created)
		REFERENCES users(alias) ON DELETE SET NULL,
	PRIMARY KEY (group_id, user_alias)
);
